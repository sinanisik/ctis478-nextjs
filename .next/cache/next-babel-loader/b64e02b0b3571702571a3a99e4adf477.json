{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/isiksinan/Documents/GitHub/ctis478-nextjs/pages/country/[id].js\";\nimport Layout from \"../../components/Layout/Layout\";\nimport styles from \"./Country.module.css\";\n\nconst Country = ({\n  country\n}) => {\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    title: country.name,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.flag,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: country.flag,\n          alt: country.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.countryName,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.value,\n          children: country.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.field,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.label,\n          children: \"Region\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.value,\n          children: country.region\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.field,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.label,\n          children: \"Population\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.value,\n          children: country.population\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.field,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.label,\n          children: \"Area\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.value,\n          children: country.area\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Country; // pre-render at request time. If the population is updated every second, every minite or every day.\n// This data does not need to be updated that often.\n// Time to first byte will be slower than getStaticProps.\n// Server must compute the result on every request\n// export const getServerSideProps = async ({ params }) => {\n//   const res = await fetch(\n//     `https://restcountries.eu/rest/v2/alpha/${params.id}`\n//   );\n//   const country = await res.json();\n//   return {\n//     props: {\n//       country: country,\n//     },\n//   };\n// };\n\nexport const getStaticPaths = async () => {\n  const res = await fetch(\"https://restcountries.eu/rest/v2/all\");\n  const countries = await res.json();\n  const paths = countries.map(country => {\n    return {\n      params: {\n        id: country.alpha3Code\n      }\n    };\n  });\n  return {\n    paths,\n    fallback: false // return 404 not found for every other route\n\n  };\n}; // To be able to use getStaticProps with dynamic routes we should use getStaticPaths function.\n// We should define a list of paths that have to be rendered to HTML at build time.\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  const res = await fetch(`https://restcountries.eu/rest/v2/alpha/${params.id}`);\n  const country = await res.json();\n  return {\n    props: {\n      country: country\n    }\n  };\n};","map":{"version":3,"sources":["/Users/isiksinan/Documents/GitHub/ctis478-nextjs/pages/country/[id].js"],"names":["Layout","styles","Country","country","name","container","flag","countryName","value","field","label","region","population","area","getStaticPaths","res","fetch","countries","json","paths","map","params","id","alpha3Code","fallback","getStaticProps","props"],"mappings":"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","sourcesContent":["import Layout from \"../../components/Layout/Layout\";\nimport styles from \"./Country.module.css\";\n\nconst Country = ({ country }) => {\n  return (\n    <Layout title={country.name}>\n      <div className={styles.container}>\n        <div className={styles.flag}>\n          <img src={country.flag} alt={country.name} />\n        </div>\n\n        <div className={styles.countryName}>\n          <div className={styles.value}>{country.name}</div>\n        </div>\n        <div className={styles.field}>\n          <div className={styles.label}>Region</div>\n          <div className={styles.value}>{country.region}</div>\n        </div>\n        <br />\n        <div className={styles.field}>\n          <div className={styles.label}>Population</div>\n          <div className={styles.value}>{country.population}</div>\n        </div>\n        <br />\n        <div className={styles.field}>\n          <div className={styles.label}>Area</div>\n          <div className={styles.value}>{country.area}</div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Country;\n\n// pre-render at request time. If the population is updated every second, every minite or every day.\n// This data does not need to be updated that often.\n// Time to first byte will be slower than getStaticProps.\n// Server must compute the result on every request\n// export const getServerSideProps = async ({ params }) => {\n//   const res = await fetch(\n//     `https://restcountries.eu/rest/v2/alpha/${params.id}`\n//   );\n\n//   const country = await res.json();\n\n//   return {\n//     props: {\n//       country: country,\n//     },\n//   };\n// };\n\nexport const getStaticPaths = async () => {\n  const res = await fetch(\"https://restcountries.eu/rest/v2/all\");\n  const countries = await res.json();\n\n  const paths = countries.map((country) => {\n    return {\n      params: {\n        id: country.alpha3Code,\n      },\n    };\n  });\n\n  return {\n    paths,\n    fallback: false, // return 404 not found for every other route\n  };\n};\n\n// To be able to use getStaticProps with dynamic routes we should use getStaticPaths function.\n// We should define a list of paths that have to be rendered to HTML at build time.\nexport const getStaticProps = async ({ params }) => {\n  const res = await fetch(\n    `https://restcountries.eu/rest/v2/alpha/${params.id}`\n  );\n\n  const country = await res.json();\n\n  return {\n    props: {\n      country: country,\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}